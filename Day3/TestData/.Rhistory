q()
install.packages("latticeExtra", dep=c("Suggests"))
install.packages("flexmix", dep=c("Suggests"))
install.packages("ROCR", dep=c("Suggests"))
install.packages("forecast", dep=c("Suggests"))
install.packages("mgcv", dep=c("Suggests"))
install.packages("plyr", dep=c("Suggests"))
install.packages("Kendall", dep=c("Suggests"))
install.packages("moments", dep=c("Suggests"))
install.packages("som", dep=c("Suggests"))
install.packages("rpart", dep=c("Suggests"))
q()
install.packages("RGtk2", dep=c("Suggests"))
install.packages("rgtk2", dep=c("Suggests"))
install.packages("RGtk2", dep=c("Suggests"))
cls()
clear()
clrscr()
help
help()
print "Hello"
print Hello
"Hello"
library(hmisc)
library(Hmisc)
library(arm)
install.packages("arm", dep=c("Suggests"))
install.packages("arm")
install.packages("arm")
install.packages("arm")
install.packages("arm")
install.packages("arm")
install.packages("arm", dep=c("Suggests"))
setwd('/User/kumaran/Work/machine-learning/Day3/TestData')
setwd('/User/kumaran/Work/machine-learning/Day3/Testdata')
setwd('/Users/kumaran/Work/machine-learning/Day3/TestData')
telco <- read.csv('Telco.csv')
View(telco)
attach(telco)
library(Hmisc)
library(lattice)
library(MASS)
library(scatterplot3d)
library(arm)
library(kohonen)
library(pmml)
library(knitr)
install.packages(knitr)
install.packages("knitr")
boxplot(ARPU~VOICE_OUT_MINS)
?cor
cor(ARPU, VOICE_OUT_CALLS)
summary(ARPU~VOICE_OUT_CALLS)
summary(ARPU~VOICE_OUT_MINS)
cor(ARPU, VOICE_OUT_MINS)
summary(ARPU~VOICE_OUT_CALLS)
summary(VOICE_OUT_CALLS~VOICE_OUT_MINS)
telco$ARPUStatus <- ifelse(ARPU<=25, "A1", ifelse(ARPU>25 && ARPU<=50, "A2", ifelse(ARPU>50 && ARPU <=75, "A3", ifelse(ARPU>75 && ARPU <=100, "A4", "A5"))))
View(telco)
boxplot(ARPUStatus)
boxplot(telco$ARPUStatus)
plot(telco$ARPU~telco$ARPUStatus)
plot(telco$ARPUStatus)
plot(telco$ARPUStatus~length)
library(reshape)
cast(telco, ARPUStatus)
cast(telco, telco$ARPUStatus)
cast(telco, telco$ARPU ~ telco$ARPUStatus)
summary(telco$ARPU~telco~ARPUStatus)
summary(telco$ARPU~telco~telco$ARPUStatus)
summary(telco$ARPU~telco$ARPUStatus)
telco$ARPUStatus <- ifelse(ARPU<=25, "A1", ifelse(ARPU>25 & ARPU<=50, "A2", ifelse(ARPU>50 & ARPU <=75, "A3", ifelse(ARPU>75 & ARPU <=100, "A4", "A5"))))
summary(telco$ARPU~telco~telco$ARPUStatus)
summary(telco$ARPU~telco$ARPUStatus)
summary(telco$ARPU~sum(telco$ARPUStatus)
)
summary(telco$ARPU~sum(telco$ARPUStatus))
?plyr
??plyr
install.packages("zoo")
library(xo)
library(zoo)
?plyr
data <- read.csv("telco", header = TRUE)
data <- read.csv("telco.csv", header = TRUE)
str(data)
attach(data)
View(data)
myData <- data[c(1, 2, 3, 4,5, 7, 11)]
View(myData)
myData.scl <- scale(myData)
View(myData.scl)
set.seed(3)
source('~/.active-rstudio-document', echo=TRUE)
myData.som <- som(data = myData.scl, grid = somgrid(5, 4, "hexagonal"))
plot(myData.som, main = "Risk profiles")
plot(myData.som, type = "quality", main = "Risk profiles - Quality")
plot(myData.som, type = "count", main = "Risk profiles - Count")
plot(myData.som, type = "quality", main = "Risk profiles - Quality")
plot(myData.som, main = "Risk profiles")
plot(myData.som, main = "Service profiles")
plot(myData.som, main = "Service profiles")
plot(myData.som, main = "Service profiles")
View(telco)
telco$InternetStatus <- ifelse(INTERNET_CALLS == 0.0, "Y" "N")
telco$InternetStatus <- ifelse(telco$INTERNET_CALLS == 0.0, "Y" "N")
telco$InternetCAllStatus <- ifelse(telco$INTERNET_CALLS == 0.0, "Y" "N")
telco$InternetCAllStatus <- ifelse(telco$INTERNET_CALLS == 0.0, "Y", "N")
attach(telco)
myData1 <- telco
summary(myData1)
c2 <- kmeans(myData1,2)
c3 <- kmeans(myData1,3)
c4 <- kmeans(myData1, 4)
c5 <- kmeans(myData1,5)
c6 <- kmeans(myData1,6)
c7 <- kmean(myData1, 7)
c8 <- kmean(myData1, 8)
df1 <- data.frame(myData1, c2$cluster)
data <- read.csv("Telco.csv")
myData1 <- data
summary(myData1)
c2 <- kmeans(myData1,2)
c3 <- kmeans(myData1,3)
c4 <- kmeans(myData1, 4)
c5 <- kmeans(myData1,5)
c6 <- kmeans(myData1,6)
c7 <- kmeans(myData1, 7)
c8 <- kmeans(myData1, 8)
df1 <- data.frame(myData1, c2$cluster)
plot(df1)
df2 <- data.frame(myData1, c2$cluster)
plot(df2)
df3 <- data.frame(myData1, c3$cluster)
plot(df2)
require(pmml)
xm <-pmml(c2)
plot(xm)
?parcoord
parcoord(telco$ARPU~VOICE_OUT_MINS)
parcoord(telco$ARPU~VOICE_OUT_CALLS)
View(telco)
parcoord(data$ARPU~data$VOICE_OUT_CALLS)
parcoord(data$ARPU, data$VOICE_OUT_CALLS)
c2
c3
c5
data <- read.csv("Telco.csv")
myData1 <- data
newdata <- sample(nrow(data), nrow(data)*0.1)
newdata1 <- data[newdata,]
myData1 <- newdata1
c2 <- kmeans(myData1,2)
c3 <- kmeans(myData1,3)
c4 <- kmeans(myData1, 4)
c5 <- kmeans(myData1,5)
c6 <- kmeans(myData1,6)
c7 <- kmeans(myData1, 7)
c8 <- kmeans(myData1, 8)
df2 <- data.frame(myData1, c2$cluster)
plot(df2)
df3 <- data.frame(myData1, c3$cluster)
df4 <- data.frame(myData1, c4$cluster)
df5 <- data.frame(myData1, c5$cluster)
df6 <- data.frame(myData1, c6$cluster)
df7 <- data.frame(myData1, c7$cluster)
df8 <- data.frame(myData1, c8$cluster)
c2
require(pmml)
xm <-pmml(c2)
table(telco$ARPUStatus, c3)
table(newdata$ARPUStatus, c3)
table(newdata$ARPUStatus, c2)
myData1$ARPUStatus <- ifelse(ARPU<=25, "A1", ifelse(ARPU>25 & ARPU<=50, "A2", ifelse(ARPU>50 & ARPU <=75, "A3", ifelse(ARPU>75 & ARPU <=100, "A4", "A5"))))
attach(myData1)
myData1$ARPUStatus <- ifelse(ARPU<=25, "A1", ifelse(ARPU>25 & ARPU<=50, "A2", ifelse(ARPU>50 & ARPU <=75, "A3", ifelse(ARPU>75 & ARPU <=100, "A4", "A5"))))
table(myData1$ARPUStatus, c2)
table(ARPUStatus, c5)
telco$ARPUStatus <- ifelse(ARPU<=25, "A1", ifelse(ARPU>25 & ARPU<=50, "A2", ifelse(ARPU>50 & ARPU <=75, "A3", ifelse(ARPU>75 & ARPU <=100, "A4", "A5"))))
attach(telco)
telco$ARPUStatus <- ifelse(ARPU<=25, "A1", ifelse(ARPU>25 & ARPU<=50, "A2", ifelse(ARPU>50 & ARPU <=75, "A3", ifelse(ARPU>75 & ARPU <=100, "A4", "A5"))))
myData1 <- telco
newdata <- sample(nrow(data), nrow(data)*0.1)
newdata1 <- data[newdata,]
myData1 <- newdata1
c2 <- kmeans(myData1,2)
c3 <- kmeans(myData1,3)
c4 <- kmeans(myData1, 4)
c5 <- kmeans(myData1,5)
c6 <- kmeans(myData1,6)
c7 <- kmeans(myData1, 7)
c8 <- kmeans(myData1, 8)
df2 <- data.frame(myData1, c2$cluster)
plot(df2)
myData1$c2cluster = c2$cluster
table(ARPUStatus, c2cluster)
table(ARPUStatus, myData1$c2cluster)
telco <- read.csv("Telco.csv")
attach(telco)
telco$ARPUStatus <- ifelse(ARPU<=25, "A1", ifelse(ARPU>25 & ARPU<=50, "A2", ifelse(ARPU>50 & ARPU <=75, "A3", ifelse(ARPU>75 & ARPU <=100, "A4", "A5"))))
myData1 <- telco
newdata <- sample(nrow(data), nrow(data)*0.1)
newdata1 <- data[newdata,]
c2 <- kmeans(newdata1,2)
c3 <- kmeans(newdata1,3)
c4 <- kmeans(newdata1, 4)
c5 <- kmeans(newdata1,5)
c6 <- kmeans(newdata1,6)
c7 <- kmeans(newdata1, 7)
c8 <- kmeans(newdata1, 8)
df2 <- data.frame(newdata1, c2$cluster)
newdata1$c2cluster = c2$cluster
table(newdata1$ARPUStatus, newdata1$c2cluster)
View(newdata1)
attach(telco)
telco <- read.csv("Telco.csv")
attach(telco)
telco$ARPUStatus <- ifelse(ARPU<=25, "A1", ifelse(ARPU>25 & ARPU<=50, "A2", ifelse(ARPU>50 & ARPU <=75, "A3", ifelse(ARPU>75 & ARPU <=100, "A4", "A5"))))
myData1 <- telco
newdata <- sample(nrow(myData1), nrow(myData1)*0.1)
newdata1 <- myData1[newdata,]
#Explore data
summary(myData1)
#k-means clustering
#myData1 <- newdata1
c2 <- kmeans(newdata1,2)
c3 <- kmeans(newdata1,3)
c4 <- kmeans(newdata1, 4)
c5 <- kmeans(newdata1,5)
c6 <- kmeans(newdata1,6)
c7 <- kmeans(newdata1, 7)
c8 <- kmeans(newdata1, 8)
View(newdata1)
c2 <- kmeans(newdata1,2)
telco <- read.csv("Telco.csv")
attach(telco)
#telco$ARPUStatus <- ifelse(ARPU<=25, "A1", ifelse(ARPU>25 & ARPU<=50, "A2", ifelse(ARPU>50 & ARPU <=75, "A3", ifelse(ARPU>75 & ARPU <=100, "A4", "A5"))))
myData1 <- telco
newdata <- sample(nrow(myData1), nrow(myData1)*0.1)
newdata1 <- myData1[newdata,]
#Explore data
#summary(myData1)
View(newdata1)
c2 <- kmeans(newdata1,2)
c3 <- kmeans(newdata1,3)
c4 <- kmeans(newdata1, 4)
c5 <- kmeans(newdata1,5)
c6 <- kmeans(newdata1,6)
c7 <- kmeans(newdata1, 7)
c8 <- kmeans(newdata1, 8)
newdata1$ARPUStatus <- ifelse(newdata1$ARPU<=25, "A1", ifelse(newdata1$ARPU>25 & newdata1$ARPU<=50, "A2", ifelse(newdata1$ARPU>50 & newdata1$ARPU <=75, "A3", ifelse(newdata1$ARPU>75 & ARPU <=100, "A4", "A5"))))
View(newdata1)
df2 <- data.frame(newdata1, c2$cluster)
newdata1$c2cluster = c2$cluster
table(newdata1$ARPUStatus, newdata1$c2cluster)
table(newdata1$ARPUStatus, newdata1$c3cluster)
table(newdata1$ARPUStatus, newdata1$c4cluster)
df3 <- data.frame(myData1, c3$cluster)
table(newdata1$ARPUStatus, newdata1$c3cluster)
table(newdata1$ARPUStatus, newdata1$c2cluster)
c3 <- kmeans(newdata1,3)
c3
df3 <- data.frame(myData1, c3$cluster)
table(newdata1$ARPUStatus, newdata1$c3cluster)
df3 <- data.frame(newdata1, c3$cluster)
table(newdata1$ARPUStatus, newdata1$c3cluster)
newdata1$c3cluster = c3$cluster
table(newdata1$ARPUStatus, newdata1$c3cluster)
df4 <- data.frame(newdata1, c4$cluster)
newdata1$c4cluster = c4$cluster
table(newdata1$ARPUStatus, newdata1$c4cluster)
newdata1$c5cluster = c5$cluster
table(newdata1$ARPUStatus, newdata1$c5cluster)
table(newdata1$ARPUStatus, newdata1$c6cluster)
newdata1$c6cluster = c6$cluster
table(newdata1$ARPUStatus, newdata1$c6cluster)
newdata1$c7cluster = c7$cluster
newdata1$c8cluster = c8$cluster
table(newdata1$ARPUStatus, newdata1$c6cluster)
table(newdata1$ARPUStatus, newdata1$c7cluster)
table(newdata1$ARPUStatus, newdata1$c8cluster)
summary(newdata1)
describe(newdata1)
c2cluster
c6
?aic
??aic
risk <- read.csv("Risk.csv")
risk$newClass <- ifelse(risk$Class == "High", "Normal")
risk$newClass <- ifelse(risk$Class == "High", "Normal")
View(risk)
risk$newClass <- ifelse(risk$Class == "High", "High", "Normal")
?glm
ml <- glm (newClass ~Ratio1+Ratio2, data = risk, family=binomial())
ml <- glm (newClass~Ratio1+Ratio2, data = risk, family=binomial())
attach(risk)
ml <- glm (newClass~Ratio1+Ratio2, data = risk, family=binomial())
ml <- glm (newClass ~Ratio1+Ratio2, data = risk, family=binomial())
??glm
library(Hmisc)
ml <- glm(newClass~Ratio1+Ratio2, data = risk, family=binomial())
risk
View(risk)
ml <- glm (newClass ~Ratio1+Ratio2, data = risk, family=binomial())
ml <- glm (newClass~Ratio1+Ratio2, data = risk, family=binomial())
ml <- glm (risk$newClass~risk$Ratio1+risk$Ratio2, data = risk, family=binomial())
glm(newClass~Ratio1+Ratio2, data = risk, family=binomial)
glm(newClass~Ratio1+Ratio2, data = risk, family=binomial()\)
glm(newClass~Ratio1+Ratio2, data = risk, family=binomial())
ml <- glm(newClass~Ratio1+Ratio2, data = risk, family=binomial())
str(risk)
risk <- read.csv("Risk.csv", stringsAsFactors = T)
risk$newClass <- ifelse(risk$Class == "High", "Normal")
risk$newClass <- ifelse(risk$Class == "High", "High", "Normal")
str(risk)
risk <- read.csv("Risk.csv", stringsAsFactors = T)
risk$newClass <- ifelse(risk$Class == "High", factor("High"), factor("Normal"))
str(risk)
ml <- glm(newClass~Ratio1+Ratio2, data = risk, family=binomial())
ml
?factor
fac <- factor("high")
fac
risk$newClass <- ifelse(risk$Class == "High", factor("High"), factor("Normal"))
View(risk)
risk$newClass <- ifelse(risk$Class == "High", factor("High", levels=letters), factor("Normal", levels = letters))
View(risk)
risk$newClass <- risk[Class == "High"]
risk$newClass <- ifelse(risk[c(6)=="High"], "High", "Normal")
risk$newClass <- ifelse(risk$Class == "High", "High", "Normal")
risk$newClass <- as.raw(risk$newClass)
str(risk)
?as.factor
risk$newClass <- ifelse(risk$Class == "High", as.factor("High"), as.factor("Normal"))
str(risk)
risk$newClass <- as.factor(ifelse(risk$Class == "High", "High", "Normal"))
str(risk)
View(risk)
ml <- glm(newClass~Ratio1+Ratio2, data = risk, family=binomial())
glm
ml
summary(ml)
history()
pred <- predict (ml, type="response")
p <- ifelse (pred < 0.5, 1, 2)
com <- table(risk$newClass, p)
com
pred
p
summary(pred)
summary(p)
describe(p)
describe(pred)
installer.packages("rpath")
install.packages("rpath")
install.packages("rpart")
library(rpart)
library(rpart)
read.csv <- read.csv("Risk.csv", stringsAsFactors  =T)
risk <- read.csv <- read.csv("Risk.csv", stringsAsFactors  =T)
risk <-  read.csv("Risk.csv", stringsAsFactors  =T)
credit <- read.csv("CreditApproval.csv", stringsAsFactors = T)
credit <- read.csv("CreditApproval.csv", stringsAsFactors = T)
m1 <- rpart (Class ~., data = risk, method = "class")
mla <- rpart (Class~., data = mydata, method ="clas")
m1 <- rpart (Class ~., data = mydata, method = "class")
mydata <- risk
m1 <- rpart (Class ~., data = mydata, method = "class")
mla <- rpart (Class~., data = mydata, method ="clas")
printcp (ml)
ml <- rpart (Class ~., data = mydata, method = "class")
printcp(ml)
plotcp(mla)
plotcp(ml)
summary(ml)
plotcp(mla)
plotcp(ml)
summary(ml)
install.packages("googlepredictionapi")
install.packages("rjson")
install.packages("RCurl")
install.packages("RCurlinstall.packages("googlepredictionapi_0.1.tar.gz", repos=NULL, type="source")")
install.packages("googlepredictionapi_0.1.tar.gz", repos=NULL, type="source")
credit
View(credit)
ml <- glm(risk~., data = credit, family=binomial())
pred <- predict (ml, type="response")
p <- ifelse (pred < 0.5, 1, 2)
com <- table(risk$newClass, p)
com
mydata <- credit
require(rpart)
ml <- rpart (risk ~., data = mydata, method = "class")
View(mydata)
ml <- rpart (Risk ~., data = mydata, method = "class")
mla <- rpart (Risk~., data = mydata, method ="clas")
printcp(ml)
plotcp(ml)
plot(ml)
ml
?plot
?prune
mlbackup < ml
mlbackup <- ml
prune(mlbackup)
plot(ml)
?plot
plot(prune(ml))
plot(test(ml))
plot(text(ml))
text(ml)
plot(ml)
text(ml)
text(ml, use.n=T, all=T)
text(ml, use.n=T, all=T)
text(ml, use.n=T, all=T)
text(ml, use.n=TRUE, all=TRUE)
text(ml)
plot(ml)
summary(ml)
text(ml)
text(ml, use.n=TRUE, all=TRUE)
plot(ml)
text(ml, use.n=TRUE, all=TRUE)
telco <- read.csv("Telco.csv")
telco <- read.csv("Telco.csv", stringsAsFactors = T)
View(telco)
